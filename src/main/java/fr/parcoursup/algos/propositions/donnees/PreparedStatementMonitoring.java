package fr.parcoursup.algos.propositions.donnees;

import fr.parcoursup.algos.utils.UtilService;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

public class PreparedStatementMonitoring implements PreparedStatement {

	private final PreparedStatement ps;
	
	private final Logger logger;
	
	private String sql;
	
	private final List<String> parametres;

	private int getSizeParametre(int parameterIndex) {
        return Math.min(parametres.size(), parameterIndex - 1);
	}
	
	
	public PreparedStatementMonitoring(PreparedStatement ps, Logger logger) {
		super();
		this.ps = ps;
		this.logger = logger;
		this.parametres = new ArrayList<>();
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return ps.executeQuery(sql);
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return ps.executeUpdate(sql);
	}

	@Override
	public void close() throws SQLException {
		ps.close();

	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return ps.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		ps.setMaxFieldSize(max);

	}

	@Override
	public int getMaxRows() throws SQLException {
		return ps.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		ps.setMaxRows(max);

	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		ps.setEscapeProcessing(enable);

	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return ps.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		ps.setQueryTimeout(seconds);

	}

	@Override
	public void cancel() throws SQLException {
		ps.cancel();

	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return ps.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		ps.clearWarnings();

	}

	@Override
	public void setCursorName(String name) throws SQLException {
		ps.setCursorName(name);

	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return ps.execute();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return ps.getResultSet();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return ps.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return ps.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		ps.setFetchDirection(direction);

	}

	@Override
	public int getFetchDirection() throws SQLException {
		return ps.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		ps.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return ps.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return ps.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return ps.getResultSetType();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		this.parametres.clear();
		ps.addBatch();
	}

	@Override
	public void clearBatch() throws SQLException {
		ps.clearBatch();
		this.parametres.clear();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return ps.executeBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return ps.getConnection();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return ps.getMoreResults(current);
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return ps.getGeneratedKeys();
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return ps.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return ps.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return ps.executeUpdate(sql, columnNames);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return ps.execute(sql, autoGeneratedKeys);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return ps.execute(sql, columnIndexes);
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return ps.execute(sql, columnNames);
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return ps.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return ps.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		ps.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return ps.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		ps.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return ps.isCloseOnCompletion();
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return ps.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return ps.isWrapperFor(iface);
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		String message = "Execution de la requÃªte : " + getRequeteSql();

		logger.info(UtilService.petitEncadrementLog(message));
		
		return ps.executeQuery();
	}

	@Override
	public int executeUpdate() throws SQLException {
		return ps.executeUpdate();
	}

	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		parametres.add(parameterIndex-1, "null");
		ps.setNull(parameterIndex, sqlType);
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		parametres.add(parameterIndex-1, x+"");
		ps.setBoolean(parameterIndex, x);

	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		parametres.add(parameterIndex-1, x+"");
		ps.setByte(parameterIndex, x);
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		parametres.add(parameterIndex-1, x+"");
		ps.setShort(parameterIndex, x);
	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x+"");
		ps.setInt(parameterIndex, x);
	}



	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x+"");
		ps.setLong(parameterIndex, x);

	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x+"");
		ps.setFloat(parameterIndex, x);

	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x+"");
		ps.setDouble(parameterIndex, x);

	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x+"");
		ps.setBigDecimal(parameterIndex, x);

	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x);
		ps.setString(parameterIndex, x);

	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), Arrays.toString(x));
		ps.setBytes(parameterIndex, x);

	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x+"");
		ps.setDate(parameterIndex, x);

	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x+"");
		ps.setTime(parameterIndex, x);

	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		parametres.add(getSizeParametre(parameterIndex), x+"");
		ps.setTimestamp(parameterIndex, x);

	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void clearParameters() throws SQLException {
		parametres.clear();
		ps.clearParameters();
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setObject(int parameterIndex, Object x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public boolean execute() throws SQLException {
		parametres.clear();
		return ps.execute();
	}

	@Override
	public void addBatch() throws SQLException {
		this.parametres.clear();
		ps.addBatch();
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setRef(int parameterIndex, Ref x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setClob(int parameterIndex, Clob x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setArray(int parameterIndex, Array x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return ps.getMetaData();
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		parametres.add(parameterIndex-1, "null");
		ps.setNull(parameterIndex, sqlType, typeName);
	}

	@Override
	public void setURL(int parameterIndex, URL x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return ps.getParameterMetaData();
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setNString(int parameterIndex, String value) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) {
		throw new RuntimeException("not implemented");
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) {
		throw new RuntimeException("not implemented");
	}

	public void setSql(String sql) {
		this.sql = sql;
	}
	
	
	private String getRequeteSql() {
		String sql = this.sql;
		
		
		for (String param : parametres) {
			sql = sql.replaceFirst("\\?", param);
		}
		return sql;
	}
	

}
